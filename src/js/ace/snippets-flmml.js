ace.define("ace/snippets/flmml",["require","exports","module"], function(acequire, exports, module) {
"use strict";

// Example: https://raw.githubusercontent.com/ajaxorg/ace/36e6744a5f40df0da52ff22b3bc729657c056e09/lib/ace/snippets/html.snippets

exports.snippetText = "snippet o = Octave\n\to${1:4}\nsnippet < = Octave Up\n\t<\nsnippet > = Octave Down\n\t>\nsnippet #OCTAVE REVERSE\n\t#OCTAVE REVERSE\nsnippet ns = Note Shift\n\tns${1:0}\nsnippet @ns = Note Shift (Relative)\n\t@ns${1:0}\nsnippet @d = Detune\n\t@d${1:0}\nsnippet @l = LFO\n\t@l${1:\\$depth},${2:\\$width},${3:\\$form},${4:\\$delay},${5:\\$time},${6:\\$dest}\nsnippet l = Length\n\tl${1:4}\nsnippet q = Gate Time (Relative)\n\tq${1:15}\nsnippet @q = Gate Time (Absolute)\n\t@q${1:0}\nsnippet & = Tie / Slur\n\t&\nsnippet {...} = Group Notes\n\t{${1}}\nsnippet v = Velocity\n\tv${1:12}\nsnippet @v = Velocity (Precise)\n\t@v${1:100}\nsnippet ( = Velocity Up\n\t(\nsnippet ) = Velocity Down\n\t)\nsnippet #VELOCITY REVERSE\n\t#VELOCITY REVERSE\nsnippet @x = Expression\n\t@x${1:127}\nsnippet x = Level Scale\n\tx${1:0}\nsnippet @p = Panpot\n\t@p${1:64}\nsnippet t = Tempo\n\tt${1:120}\nsnippet ; = End of Macro or Track\n\t;\nsnippet /:...:/ = Repeat\n\t/:${1:2}:/\nsnippet / = Repeat: Break Last Trip\n\t/\nsnippet /*...*/ = Comment\n\t/*${1}*/\nsnippet * = Portamento (MML-ish)\n\t*\nsnippet @u0 = Portamento (MIDI-ish): Off\n\t@u0\nsnippet @u1 = Portamento (MIDI-ish): On\n\t@u1\nsnippet @u2 = Portamento (MIDI-ish): Rate\n\t@u2,${1:64}\nsnippet @u3 = Portamento (MIDI-ish): Offset\n\t@u3,${1:o4c}\nsnippet @0 = Waveform: Sine\n\t@0\nsnippet @0-1 = Waveform: Sine (Half Rectified)\n\t@0-1\nsnippet @0-2 = Waveform: Sine (Full Rectified)\n\t@0-2\nsnippet @1 = Waveform: Sawtoooth (Starts at Max)\n\t@1\nsnippet @1-1 = Waveform: Sawtoooth (Starts at Zero)\n\t@1-1\nsnippet @2 = Waveform: Triangle (Starts at Max)\n\t@2\nsnippet @2-1 = Waveform: Triangle (Starts at Zero)\n\t@2-1\nsnippet @3 = Waveform: Pulse (+Duty)\n\t@3@w${1:50}\nsnippet @4 = Waveform: White Noise (+Freq)\n\t@4@n${1:0}\nsnippet @5 = Waveform: FC Pulse (+Duty)\n\t@5@w${1:4}\nsnippet @6 = Waveform: FC Tri. (Starts at Max)\n\t@6\nsnippet @6-1 = Waveform: FC Tri. (Starts at Zero)\n\t@6-1\nsnippet @7 = Waveform: FC Noise\n\t@7\nsnippet @8 = Waveform: FC Short Noise\n\t@8\nsnippet @9 = Waveform: FC DPCM\n\t@9-${1:\\$id}\nsnippet @10 = Waveform: GB Wave Table\n\t@10-${1:\\$id}\nsnippet @11 = Waveform: GB Noise\n\t@11\nsnippet @12 = Waveform: GB Short Noise\n\t@12\nsnippet @13 = Waveform: Wave Table\n\t@13-${1:\\$id}\nsnippet @14 = Waveform: FM Synth\n\t@14-${1:\\$id}\nsnippet @mh = FM Synth LFO\n\t@mh${1:\\$wf},${2:\\$lfrq},${3:\\$pmd},${4:\\$amd},${5:\\$pms},${6:\\$ams},${7:\\$sync}\nsnippet @w = Pulse Duty\n\t@w${1:50}\nsnippet @w = Pulse Duty (Mix Mode)\n\t@w-${1:50}\nsnippet @n = Noise Frequency\n\t@n${1:0}\nsnippet @f = Filter\n\t@f${1:\\$switch},${2:\\$amount},${3:\\$frequency},${4:\\$resonance}\nsnippet @e1 = Envelope: Amplitude\n\t@e1,${1:\\$attack},${2:\\$decay},${3:\\$sustain},${4:\\$release}\nsnippet @e2 = Envelope: Filter\n\t@e2,${1:\\$attack},${2:\\$decay},${3:\\$sustain},${4:\\$release}\nsnippet @'a' = Formant Filter: 'A'\n\t@'a'\nsnippet @'i' = Formant Filter: 'I'\n\t@'i'\nsnippet @'u' = Formant Filter: 'U'\n\t@'u'\nsnippet @'e' = Formant Filter: 'E'\n\t@'e'\nsnippet @'o' = Formant Filter: 'O'\n\t@'o'\nsnippet @'' = Formant Filter: Off\n\t@''\nsnippet @o = Track Modulation: Output\n\t@o${1:\\$mode},${2:\\$pipeID}\nsnippet @i = Track Modulation: FM Input\n\t@i${1:\\$mode},${2:\\$pipeID}\nsnippet @r = Track Modulation: Ring Input\n\t@r${1:\\$mode},${2:\\$pipeID}\nsnippet @s = Track Modulation: Oscilator Sync\n\t@s${1:\\$mode},${2:\\$pipeID}\nsnippet #WAV9 = FC DPCM Wave Data\n\t#WAV9 ${1:\\$id},${2:\\$offset},${3:\\$loop},${4:\\$data}\nsnippet #WAV10 = GB Wave Table Data\n\t#WAV10 ${1:\\$id},${2:\\$data}\nsnippet #WAV13 = Wave Table Data\n\t#WAV13 ${1:\\$id},${2:\\$data}\nsnippet #OPM = FM Synth Tone Data\n\t#OPM@${1:\\$id} {\n\t    AL FB\n\t    AR DR SR RR SL TL KS ML DT1 DT2 AME /* Op.1 */\n\t    AR DR SR RR SL TL KS ML DT1 DT2 AME /* Op.2 */\n\t    AR DR SR RR SL TL KS ML DT1 DT2 AME /* Op.3 */\n\t    AR DR SR RR SL TL KS ML DT1 DT2 AME /* Op.4 */\n\t    /*\n\t    OM\n\t    WF LFRQ PMD AMD\n\t    PMS AMS\n\t    NE NFRQ\n\t    */\n\t}\n\t\nsnippet #USING POLY\n\t#USING POLY ${1:1}\nsnippet #USING POLY (force)\n\t#USING POLY ${1:1} force\nsnippet @pl = Polyphonic Mode\n\t@pl${1:1}\nsnippet [...] = Polyphonic Notes\n\t[${1}]\nsnippet #TITLE\n\t#TITLE ${1:title}\nsnippet #ARTIST\n\t#ARTIST ${1:artist}\nsnippet #COMMENT\n\t#COMMENT ${1:comment}\nsnippet #CODING\n\t#CODING ${1:coding}\nsnippet #PRAGMA\n\t#PRAGMA ${1:pragma}\n";
exports.docHTML = {"o = Octave":{"ja":"オクターブ指定。0～8まで。"},"< = Octave Up":{"ja":"オクターブを上げます。"},"> = Octave Down":{"ja":"オクターブを下げます。"},"#OCTAVE REVERSE":{"ja":"MMLの先頭にこの記述をすると、オクターブ\n上げ下げ（不等号）の機能が逆転します。\n"},"ns = Note Shift":{"ja":"絶対ノートシフト。例えば\n<code>CDE NS-1 CDE NS-1 CDE</code>\nと書くと二度目のドレミは半音下がります。\n三度目も同じ半音さがったドレミです。\n"},"@ns = Note Shift (Relative)":{"ja":"相対ノートシフト。例えば\n<code>CDE @NS-1 CDE @NS-1 CDE</code>\nと書くと二度目のドレミは半音、\n三度目は更に半音下がります。\n"},"@d = Detune":{"ja":"デチューン。cent単位でピッチを調整します。\nプラスマイナスどちらも可能。\n"},"@l = LFO":{"ja":"LFO。depth、width、form、delay、time、destの順。\ndepthは音程を揺らす振幅。単位はcent。\nwidthは１周期の長さ。単位はticks。\nformは波形。0：サイン波／1:ノコギリ波／2:三角波／3:パルス波。\n            番号の前にマイナスを付けると上下が反転した波形になる。\ndelayは遅延。発音からこのticks経過後にLFOがスタートする。\ntimeは回数。ここで指定した回数が終わったらLFOなしに戻る。\ndestはLFOで揺らすパラメータ\n      (0:音程、1:音量、2:フィルタカットオフ周波数、\n       3:パルス幅、4:FM入力レベル、5:パン)。\nform、delay、time、destは省略可能。\n"},"l = Length":{"ja":"デフォルト音長指定。"},"q = Gate Time (Relative)":{"ja":"ゲートタイムの割合の指定。\nある音を再生するとき、実際には\n指定された音長の[n]/16だけが発音され、\n残りの時間は休符になります。\n"},"@q = Gate Time (Absolute)":{"ja":"ゲートタイムの絶対指定。\n<code>q</code>で指定されたゲートタイムから全音符の\nx/192の長さを引いたゲートタイムにする。\n"},"& = Tie / Slur":{"ja":"タイまたはスラー。\n<code>C2&amp;C8</code>と書けばタイ、<code>C&amp;D&amp;E</code>と書けばスラー。\nRev.38695以降なら、タイは\n<code>C2&amp;8</code>のような書き方も可能です。\n"},"{...} = Group Notes":{"ja":"通常の音長指定では割り切れないような連符\n(５連符や7連符)を演奏する。\n{音程データ}音長 と言う感じで指定し、\n音長分の長さ内に音程データが均等に割り振られます。\n\n[例] <code>{CEGEC}2</code> /* 2分音符の長さ内で CEGEC を\n                 均等な長さで演奏します */\n\n音長を省略するとデフォルト音長が使用されます。\nまた、あまりにも無茶なデータは正しく\n演奏しない場合があるのでほどほどに。\n{ }内では <code>*</code> コマンドは使用できません。\n連符を引数付きマクロの引数に使う場合は\n<code>\" \"</code> で括った指定方法で指定してください。\n\n<code>$MACRO{ARG} = %ARG;</code>\n<code>$MACRO{{CDEFG}4} /* NG */</code>\n<code>$MACRO{\"{CDEFG}4\"} /* OK */</code>\n（Rev.38695以降）\n"},"v = Velocity":{"ja":"大まかなベロシティ（音量）指定。0～15まで。"},"@v = Velocity (Precise)":{"ja":"細かいベロシティ（音量）指定。0～127まで。"},"( = Velocity Up":{"ja":"ベロシティ（音量）を上げます。\n直前に使った音量コマンドが<code>v</code>か<code>@v</code>かによって\n変化量が変わります。\n"},") = Velocity Down":{"ja":"ベロシティ（音量）を下げます。\n直前に使った音量コマンドが<code>v</code>か<code>@v</code>かによって\n変化量が変わります。\n"},"#VELOCITY REVERSE":{"ja":"MMLの先頭にこの記述をすると、\nベロシティ上げ下げ（括弧）の機能が逆転します。\n"},"@x = Expression":{"ja":"エクスプレッションの指定。\nベロシティは発音時の音の強さですが、\nエクスプレッションは音の抑揚をつけるのに使われます。\nですから、スラーの途中で変更可能です。0～127まで。\n"},"x = Level Scale":{"ja":"音量モードの指定。\n0のとき線形の音量指定。\n1のとき非線形の（音楽的な）音量指定。\nエンベロープとベロシティに影響します。\nデフォルトは0。\n"},"@p = Panpot":{"ja":"1～127で、音の定位を指定します。\n小さいほど左、大きいほど右で、デフォルトは64。\n"},"t = Tempo":{"ja":"BPMによるテンポ指定。\n小数点以下第二位まで有効です（Rev.38599～）。\n"},"; = End of Macro or Track":{"ja":"次のトラックへ移ります。\n和音を出したいときにはコレを使います。\n"},"/:...:/ = Repeat":{"ja":"繰り返しの指定。\n<code>/:</code> から <code>:/</code> の間を[n]回繰り返します。\n最終ループのときは <code>/</code> でループを抜けます。\n<code>/</code> は省略可能。[n]省略時は２回繰り返し。\n"},"/ = Repeat: Break Last Trip":{"ja":"<code>/:</code> … <code>:/</code> の最終ループを抜けます。"},"/*...*/ = Comment":{"ja":"<code>/*</code> と <code>*/</code> に囲まれた文字列は\nコメントとして読み飛ばします。(Rev.[650]から実装)\n"},"* = Portamento (MML-ish)":{"ja":"MML風ポルタメント(Rev.38695以降)。\nノートを * で繋げるとポルタメントになります。\n\n[例] <code>C*&lt;C4;</code> /* ドからオクターブ上のドまで４分音符の\n               長さで滑らかに変化します */\n     <code>C1&amp;C*&lt;C4&amp;C2.</code> /* ドを全音符分なった後、オクターブ上の\n                     ドまで４分音符の長さで変化し、\n                     その後符点２分音符の長さでなります */\n\n次のような記述は出来ません。\n[例] <code>C*&lt;C4*&gt;C4</code> /* この場合はエラーになります */\n\n全音符以上の長さで変化をさせたい場合は\n音長のみのタイで実現できます。\n[例] <code>C*&lt;C1&amp;1&amp;1&amp;1;</code> /* 全音符４つ分の長さでドからオクターブ上のドまで変化します */\n"},"@u0 = Portamento (MIDI-ish): Off":{"ja":"MIDIデータ風ポルタメントをOFFにします。\nMIDIで言う所のCC#65に相当します。\n（Rev.38695以降）\n"},"@u1 = Portamento (MIDI-ish): On":{"ja":"MIDIデータ風ポルタメントをONにします。\nMIDIで言う所のCC#65に相当します。\n（Rev.38695以降）\n"},"@u2 = Portamento (MIDI-ish): Rate":{"ja":"MIDIデータ風ポルタメントの音程変化の割合。\n0が早く、127がゆっくり音程が変化します。\nMIDIで言う所のCC#5に相当します。\n（Rev.38695以降）\n"},"@u3 = Portamento (MIDI-ish): Offset":{"ja":"MIDIデータ風ポルタメントの基準の音程。\nMIDIで言う所のCC#84に相当します。\n未指定時は直前の音程からの音程変化になります。\nこのコマンドが指定された直後のノートにのみ影響し、\nその次からはまた直前のノートからとなります。\n\n[例] <code>@U3,48</code>   /* ノート番号を指定 */\n     <code>@U3,O3A-</code> /* ノートを文字として指定 */\n\n基準の音程の指定方法は上記の２種類あり、\n後者で使用可能な文字は <code>O, A～G, -, +, #</code> のみです。\n相対オクターブ変更等は使用できません。\n"},"@0 = Waveform: Sine":{"ja":"VCOの波形（音色）をサイン波に変更します。"},"@0-1 = Waveform: Sine (Half Rectified)":{"ja":"VCOの波形（音色）を半波整流サイン波に変更します。"},"@0-2 = Waveform: Sine (Full Rectified)":{"ja":"VCOの波形（音色）を全波整流サイン波に変更します。"},"@1 = Waveform: Sawtoooth (Starts at Max)":{"ja":"VCOの波形（音色）をノコギリ波に変更します。"},"@1-1 = Waveform: Sawtoooth (Starts at Zero)":{"ja":"VCOの波形（音色）をノコギリ波（変位0から開始）に変更します。"},"@2 = Waveform: Triangle (Starts at Max)":{"ja":"VCOの波形（音色）を三角波に変更します。"},"@2-1 = Waveform: Triangle (Starts at Zero)":{"ja":"VCOの波形（音色）を三角波（変位0から開始）に変更します。"},"@3 = Waveform: Pulse (+Duty)":{"ja":"VCOの波形（音色）をパルス波に変更します。\n<code>@w</code> にデューティ比を <code>0～100</code> で指定します。\nマイナスの値を指定するとMIXモード\n（ノイズ混じりの音）になります。\n"},"@4 = Waveform: White Noise (+Freq)":{"ja":"VCOの波形（音色）をホワイトノイズに変更します。\n<code>@n</code> にノイズ周波数を <code>0～127</code> で指定します。\n大きいほど低い感じになります。\n"},"@5 = Waveform: FC Pulse (+Duty)":{"ja":"VCOの波形（音色）をFCパルス波に変更します。\n@w にデューティ比を 0～8 で指定します\n（12.5×n％のパルス波になります）。\n"},"@6 = Waveform: FC Tri. (Starts at Max)":{"ja":"VCOの波形（音色）をFC三角波に変更します。"},"@6-1 = Waveform: FC Tri. (Starts at Zero)":{"ja":"VCOの波形（音色）をFC三角波（変位0から開始）に変更します。"},"@7 = Waveform: FC Noise":{"ja":"VCOの波形（音色）をFCノイズに変更します。\n音程によって周波数が変わります。\n<code>o0c</code> が一番高い周波数で、音程を上げるに従って\n低周波ノイズになります。\n"},"@8 = Waveform: FC Short Noise":{"ja":"VCOの波形（音色）をFCショートノイズに変更します。\n音程によって周波数が変わります。\n<code>o0c</code> が一番高い周波数で、音程を上げるに従って\n低周波ノイズになります。\n"},"@9 = Waveform: FC DPCM":{"ja":"VCOの波形（音色）をFC DPCMに変更します。\n<code>#WAV9</code> によって音色を定義し、\n<code>@9-0</code> のようにして音色を選択します。\n<code>o0c</code> が一番低い周波数で、音程を上げると\n16段階までの周波数を表現できます。\n"},"@10 = Waveform: GB Wave Table":{"ja":"VCOの波形（音色）をGB波形メモリ音源に変更します。\n<code>#WAV10</code> によって音色を定義し、\n<code>@10-0</code> のようにして音色を選択します。\n"},"@11 = Waveform: GB Noise":{"ja":"VCOの波形（音色）をGBノイズに変更します。\n音程によって周波数が変わります。\n<code>o0c</code> が一番高い周波数で、音程を上げるに従って\n低周波ノイズになります。\n"},"@12 = Waveform: GB Short Noise":{"ja":"VCOの波形（音色）をGBショートノイズに変更します。\n音程によって周波数が変わります。\n<code>o0c</code> が一番高い周波数で、音程を上げるに従って\n低周波ノイズになります。\n"},"@13 = Waveform: Wave Table":{"ja":"VCOの波形（音色）を波形メモリ音源に変更します。\n<code>#WAV13</code> によって音色を定義し、\n<code>@13-0</code> のようにして音色を選択します。\n"},"@14 = Waveform: FM Synth":{"ja":"<a href=\"http://flmml.codeplex.com/wikipage?title=%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABFM&referringTitle=Documentation\">公式ドキュメントをお読みください。</a>"},"@w = Pulse Duty (Mix Mode)":{"ja":"@3パルス波を選択しているときのパルス幅（デューティ比）を\nパーセントで指定します。0～100でデフォルトは50。\n@5のFCパルス波を選択しているときは\n12.5×n％のパルス波になります。\n@3のときマイナス指定をすると\nMIXモード（ノイズ混じりの音）になります。\n"},"@n = Noise Frequency":{"ja":"@4ノイズ、または@3MIXモード時のノイズ周波数設定。\n0～127で、大きいほど低い感じになります。\n"},"@f = Filter":{"ja":"フィルタ。switch、amount、frequency、resonanceの順。\nswitchは 0のときフィルタなし /\n 1のとき荒いLPF /  2のとき高品質LPF\n-1のとき荒いHPF / -2のとき高品質HPF。\namountは-127～127でフィルターエンベロープの影響度を設定します。\nfrequencyは0～127で基準になるカットオフ周波数を設定します。\nresonanceは0～127でレゾナンス量を設定します。\n127のときは発振します。<code>@E2</code> のエンベロープが影響します。\n"},"@e1 = Envelope: Amplitude":{"ja":"VCA（音量）のエンベロープ設定。\nattack、decay、sustain、releaseの順に指定します。\nattack, decay, releaseは127イコール１秒。\nsustainは0～127の間で指定します。\nまた、decayとsustainのペアを複数続けて書くことで\nエンベロープの制御点を増やすことができます。\n"},"@e2 = Envelope: Filter":{"ja":"VCF（フィルタ）のエンベロープの設定。\nattack、decay、sustain、releaseの順に指定します。\nattack, decay, releaseは127イコール１秒。\nsustainは0～127の間で指定します。\nまた、decayとsustainのペアを複数続けて書くことで\nエンベロープの制御点を増やすことができます。\n"},"@'a' = Formant Filter: 'A'":{"ja":"フォルマント・フィルタ。人の声が持つ特徴的な倍音を\n強調することで声のように聞かせます。\n<code>@'A'</code> は「あ」\n<code>@'I'</code> は「い」\n<code>@'U'</code> は「う」\n<code>@'E'</code> は「え」\n<code>@'O'</code> は「お」。\n<code>@''</code> で機能オフ。\n"},"@'i' = Formant Filter: 'I'":"@'a' = Formant Filter: 'A'","@'u' = Formant Filter: 'U'":"@'a' = Formant Filter: 'A'","@'e' = Formant Filter: 'E'":"@'a' = Formant Filter: 'A'","@'o' = Formant Filter: 'O'":"@'a' = Formant Filter: 'A'","@'' = Formant Filter: Off":"@'a' = Formant Filter: 'A'","@o = Track Modulation: Output":{"ja":"FM変調のためのパイプへの出力。\n一つ目の数値が0ならOFF。1なら上書き、2なら加算モード。\n二つ目の数字は出力するパイプの番号（0～3）。\n詳しくは<a href=\"http://sketch.txt-nifty.com/blog/2008/11/flmml---fmfm-ec.html\">こちらの記事</a>を。\n"},"@i = Track Modulation: FM Input":{"ja":"FM変調のためのパイプからの入力。\n一つ目の数値が0ならOFF。1～8なら変調の感度を指定します。\n二つ目の数字は入力するパイプの番号（0～3）。\n詳しくは<a href=\"http://sketch.txt-nifty.com/blog/2008/11/flmml---fmfm-ec.html\">こちらの記事</a>を。\n"},"@r = Track Modulation: Ring Input":{"ja":"パイプ中の音声とのリングモジュレーション。\n一つ目の数値がモジュレーションの感度、0ならオフ。\n1～8ならモジュレーションの感度を指定します。\n4のときが通常のリングモジュレーション相当。\n二つ目の数値はモジュレーションに使用するパイプの番号（0～3）。\n"},"@s = Track Modulation: Oscilator Sync":{"ja":"オシレータシンク。一つ目の数値が0ならOFF。\n1なら同期信号用パイプへ同期信号を出力（そのトラックの音声出力には影響なし）。\n2ならオシレータを同期信号用パイプの信号に同期させる。\n二つ目の数値は出力先・入力元とする同期信号用パイプ番号（0～3）。\n"},"#WAV9 = FC DPCM Wave Data":{"ja":"FC DPCM音源のサンプルデータ定義。\n詳しくは<a href=\"http://sketch.txt-nifty.com/blog/2009/05/flmml---dpcm-2b.html\">こちらの記事</a>を。\n"},"#WAV10 = GB Wave Table Data":{"ja":"GB波形メモリ音源のサンプルデータ定義。\n詳しくは<a href=\"http://sketch.txt-nifty.com/blog/2009/02/flmml---gb-8b0f.html\">こちらの記事</a>を。\n"},"#WAV13 = Wave Table Data":{"ja":"波形メモリ音源(@13)の音色テーブル定義。\n最初の数値で音色番号、そのあとに続くデータは\n波形データを16進数2桁で1サンプルを表すサンプル列\n(最大1024サンプル)です。\n"},"#OPM = FM Synth Tone Data":{"ja":"<a href=\"http://flmml.codeplex.com/wikipage?title=%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABFM&referringTitle=Documentation\">公式ドキュメントをお読みください。</a>"},"#USING POLY":{"ja":"ポリフォニックモード(以降 POLY)を有効にします。\nこの宣言がなければ、FlMMLは以前と同じ挙動をします。\n＃ ポリフォニックモードとは\n＃ １つのトラックあたり複数の音を同時に鳴らすことが出来ます。\n＃ 後述の和音記法を用いて1トラックで和音を奏でることが可能です。\n＃ 長いリリースの音でも途切れずに再生が可能です。\n\nスペースを空けて最大発音数(以降 POLYMAX)を記述します。\nその後にスペースを空けて\"force\"と記述すると強制的にすべてのトラックにPOLYを設定します。\n\nFMには向いてないので、FMトラックにはPOLYを適用しないように。\n"},"#USING POLY (force)":"#USING POLY","@pl = Polyphonic Mode":{"ja":"このコマンド以降、現在のトラックに対してPOLYを有効にします。\n\n続けて最大発音数を記述します。\nPOLYMAXでリミットされます。\n省略時はPOLYMAXが適用されます。\n\n\"#USING POLY\"が宣言されていない場合、\"@pl\"は無視されます。\n\"#USING POLY\"が宣言されていても、\"@pl\"がない場合MONOモード(以前のFlMML)のままですが\n\"#USING POLY force\"が宣言されている場合はこの限りではありません。\n"},"[...] = Polyphonic Notes":{"ja":"和音記法。\n[]で音符を括れば同時に鳴らすことが出来ます。\nRでカッコ内での発音位置をずらすことが出来ます。\n#USING POLY宣言必須\n使用トラックで@pl必須\n\n機能制限\n　　スラー使用不可。（使用した場合の動作は未定義）\n　　連符記述は使用しても意味を成さない。\n　　（分割された音符が同時に発声します。）\n　　パイプ処理非推奨。\n詳しくは<a href=\"http://coderepos.org/share/wiki/poly_chord\">こちらの記事</a>を。\n"},"#TITLE":{"ja":"曲のタイトルを記述します。"},"#ARTIST":{"ja":"歌手・作曲者・編曲者などを記述します。"},"#COMMENT":{"ja":"コメントを記述します。"},"#CODING":{"ja":"MML作成者の名前を記述します。"},"#PRAGMA":{"ja":"外部ツールが使用するタグです。FlMMLでは当該行を無視します"}};
exports.scope = "flmml";

});
